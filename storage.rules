rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isSignedIn() && request.auth.token.role == role;
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isDeveloper() {
      return hasRole('developer') || isAdmin();
    }
    
    function isInvestor() {
      return hasRole('investor') || hasRole('committee') || isAdmin();
    }
    
    function isCommittee() {
      return hasRole('committee') || isAdmin();
    }
    
    // File size limits
    function isValidImageSize() {
      return request.resource.size < 5 * 1024 * 1024; // 5MB
    }
    
    function isValidDocumentSize() {
      return request.resource.size < 50 * 1024 * 1024; // 50MB
    }
    
    function isValidVideoSize() {
      return request.resource.size < 500 * 1024 * 1024; // 500MB
    }
    
    // File type validation
    function isImage() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function isDocument() {
      return request.resource.contentType.matches('application/pdf') ||
             request.resource.contentType.matches('application/msword') ||
             request.resource.contentType.matches('application/vnd.*') ||
             request.resource.contentType.matches('text/.*');
    }
    
    function isVideo() {
      return request.resource.contentType.matches('video/.*');
    }
    
    // ============================================
    // USER PROFILE UPLOADS
    // ============================================
    
    // User profile pictures
    match /users/{userId}/profile/{fileName} {
      allow read: if true; // Public profile pictures
      allow write: if isOwner(userId) && 
                     isImage() && 
                     isValidImageSize();
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // User documents (private)
    match /users/{userId}/documents/{document=**} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) && 
                     isDocument() && 
                     isValidDocumentSize();
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // ============================================
    // INVESTOR PORTAL FILES
    // ============================================
    
    // Public investor documents
    match /investor-documents/public/{document=**} {
      allow read: if isInvestor();
      allow write: if isAdmin() && 
                     isDocument() && 
                     isValidDocumentSize();
      allow delete: if isAdmin();
    }
    
    // Standard investor documents
    match /investor-documents/standard/{document=**} {
      allow read: if isInvestor();
      allow write: if isAdmin() && 
                     isDocument() && 
                     isValidDocumentSize();
      allow delete: if isAdmin();
    }
    
    // Committee-only documents
    match /investor-documents/committee/{document=**} {
      allow read: if isCommittee();
      allow write: if isAdmin() && 
                     isDocument() && 
                     isValidDocumentSize();
      allow delete: if isAdmin();
    }
    
    // Pitch decks and presentations
    match /investor-documents/presentations/{document=**} {
      allow read: if isInvestor();
      allow write: if isAdmin() && 
                     (isDocument() || isVideo()) && 
                     (isValidDocumentSize() || isValidVideoSize());
      allow delete: if isAdmin();
    }
    
    // Financial reports
    match /investor-documents/financials/{year}/{document=**} {
      allow read: if isInvestor();
      allow write: if isAdmin() && 
                     isDocument() && 
                     isValidDocumentSize();
      allow delete: if isAdmin();
    }
    
    // ============================================
    // DEVELOPER RESOURCES
    // ============================================
    
    // Public developer resources
    match /developer-resources/public/{resource=**} {
      allow read: if true; // Public access
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Developer project files
    match /projects/{projectId}/{file=**} {
      allow read: if isDeveloper() && 
                    (resource.metadata.owner == request.auth.uid || 
                     request.auth.uid in resource.metadata.collaborators ||
                     isAdmin());
      allow write: if isDeveloper() && 
                     (resource.metadata.owner == request.auth.uid || 
                      request.auth.uid in resource.metadata.collaborators) &&
                     isValidDocumentSize();
      allow delete: if (isDeveloper() && resource.metadata.owner == request.auth.uid) || 
                      isAdmin();
    }
    
    // SDK and documentation
    match /sdk/{version}/{file=**} {
      allow read: if true; // Public SDK access
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // ============================================
    // PUBLIC CONTENT
    // ============================================
    
    // Marketing materials
    match /public/marketing/{file=**} {
      allow read: if true;
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Blog post images
    match /public/blog/{postId}/{image=**} {
      allow read: if true;
      allow write: if isAdmin() && 
                     isImage() && 
                     isValidImageSize();
      allow delete: if isAdmin();
    }
    
    // Company logos and branding
    match /public/branding/{file=**} {
      allow read: if true;
      allow write: if isAdmin() && 
                     isImage() && 
                     isValidImageSize();
      allow delete: if isAdmin();
    }
    
    // ============================================
    // ADMIN UPLOADS
    // ============================================
    
    // Admin-only files
    match /admin/{file=**} {
      allow read: if isAdmin();
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // System backups
    match /backups/{backup=**} {
      allow read: if isAdmin();
      allow write: if false; // Only system can write backups
      allow delete: if isAdmin();
    }
    
    // Audit files
    match /audit/{file=**} {
      allow read: if isAdmin();
      allow write: if isAdmin();
      allow delete: if false; // Audit files cannot be deleted
    }
    
    // ============================================
    // TEMPORARY UPLOADS
    // ============================================
    
    // Temporary upload area (auto-cleaned after 24 hours)
    match /temp/{userId}/{file=**} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && 
                     request.resource.size < 10 * 1024 * 1024; // 10MB limit
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // ============================================
    // SUPPORT TICKETS
    // ============================================
    
    // Support ticket attachments
    match /support/{ticketId}/{file=**} {
      allow read: if isSignedIn() && 
                    (resource.metadata.userId == request.auth.uid || isAdmin());
      allow write: if isSignedIn() && 
                     request.auth.uid == request.resource.metadata.userId &&
                     isValidDocumentSize();
      allow delete: if isAdmin();
    }
    
    // ============================================
    // DEFAULT DENY RULE
    // ============================================
    
    // Deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
